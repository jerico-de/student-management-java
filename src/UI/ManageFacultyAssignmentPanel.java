/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import DAO.FacultyAssignmentDAO;
import DAO.FacultyDAO;
import DAO.GradeLevelDAO;
import DAO.SectionDAO;
import DAO.SubjectDAO;
import Model.Faculty;
import Model.FacultyAssignment;
import Model.GradeLevel;
import Model.Section;
import Model.Subject;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USER
 */
public class ManageFacultyAssignmentPanel extends javax.swing.JPanel {
    
    private FacultyDAO facultyDAO = new FacultyDAO();
    private SubjectDAO subjectDAO = new SubjectDAO();
    private GradeLevelDAO gradeLevelDAO = new GradeLevelDAO();
    private SectionDAO sectionDAO = new SectionDAO();
    private FacultyAssignmentDAO assignmentDAO = new FacultyAssignmentDAO();

    private DefaultTableModel tableModel;
    
    private boolean isUpdatingFilters = false;

    /**
     * Creates new form ManageFacultyAssignmentPanel
     */
    public ManageFacultyAssignmentPanel() throws SQLException {
        initComponents();
        initTable();
        loadDropdowns();
        addGradeLevelSectionSync();
        loadFilterOptions();
        addFilterSyncLogic();
        loadAssignments();
        addLogic();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel = new javax.swing.JLabel();
        lblFaculty = new javax.swing.JLabel();
        lblSubject = new javax.swing.JLabel();
        lblSection = new javax.swing.JLabel();
        cbFaculty = new javax.swing.JComboBox<>();
        cbSubject = new javax.swing.JComboBox<>();
        cbSection = new javax.swing.JComboBox<>();
        chkAdviser = new javax.swing.JCheckBox();
        btnAssign = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAssignments = new javax.swing.JTable();
        btnSearch = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        btnReset = new javax.swing.JButton();
        cbSubjectFilter = new javax.swing.JComboBox<>();
        cbSectionFilter = new javax.swing.JComboBox<>();
        cbAdviserFilter = new javax.swing.JComboBox<>();
        cbGradeFilter = new javax.swing.JComboBox<>();
        cbGradeLevel = new javax.swing.JComboBox<>();
        lblSubject1 = new javax.swing.JLabel();

        jLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel.setText("MANAGE ASSIGNMENT");

        lblFaculty.setText("Faculty:");

        lblSubject.setText("Subject:");

        lblSection.setText("Section:");

        cbFaculty.setModel(new javax.swing.DefaultComboBoxModel<Faculty>());

        cbSubject.setModel(new javax.swing.DefaultComboBoxModel<Subject>());

        cbSection.setModel(new javax.swing.DefaultComboBoxModel<Section>());

        chkAdviser.setText("Set as Adviser for this Section");

        btnAssign.setText("Assign Faculty");

        btnRemove.setText("Remove Assignment");

        btnRefresh.setText("Refresh Table");

        jScrollPane1.setPreferredSize(new java.awt.Dimension(476, 400));

        tblAssignments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblAssignments);

        btnSearch.setText("Search");

        btnReset.setText("Reset");

        cbSubjectFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbSectionFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbAdviserFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbGradeFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbGradeLevel.setModel(new javax.swing.DefaultComboBoxModel<GradeLevel>());

        lblSubject1.setText("Grade Level:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnRefresh)
                .addGap(67, 67, 67))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFaculty, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblSubject, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblSubject1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblSection, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbFaculty, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbGradeLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbSection, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chkAdviser))
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbSubjectFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(cbGradeFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbSectionFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbAdviserFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSearch))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(btnAssign)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 542, Short.MAX_VALUE)))
                .addGap(38, 38, 38))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 15, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbAdviserFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbSectionFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbSubjectFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnReset)
                            .addComponent(cbGradeFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(btnRefresh)
                        .addGap(52, 52, 52))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblFaculty)
                            .addComponent(cbFaculty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblSubject)
                            .addComponent(cbSubject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblSubject1)
                            .addComponent(cbGradeLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblSection)
                            .addComponent(cbSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(chkAdviser)
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAssign)
                            .addComponent(btnRemove))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initTable() {
        tableModel = new DefaultTableModel(
                new Object[]{"Faculty", "Subject", "Grade Level", "Section", "Adviser"}, 0
        );
        tblAssignments.setModel(tableModel);
    }

    private void loadDropdowns() throws SQLException {
        cbFaculty.removeAllItems();
        cbSubject.removeAllItems();
        cbGradeLevel.removeAllItems();
        cbSection.removeAllItems();

        Faculty placeholderFaculty = new Faculty();
        placeholderFaculty.setFacultyId(-1);
        placeholderFaculty.setFirstName("");
        placeholderFaculty.setLastName("Select");
        cbFaculty.addItem(placeholderFaculty);
        for (Faculty f : facultyDAO.getAllFaculty()) {
            cbFaculty.addItem(f);
        }
        
        Subject placeholderSubject = new Subject();
        placeholderSubject.setSubjectId(-1);
        placeholderSubject.setSubjectName("Select");
        cbSubject.addItem(placeholderSubject);
        for (Subject s : subjectDAO.getAllSubjects()) {
            cbSubject.addItem(s);
        }
        
        GradeLevel placeholderGrade = new GradeLevel();
        placeholderGrade.setGradeLevelId(-1);
        placeholderGrade.setGradeLevelName("Select");
        cbGradeLevel.addItem(placeholderGrade);
        for (GradeLevel gl : gradeLevelDAO.getAllGradeLevels()) {
            cbGradeLevel.addItem(gl);
        }
        
        Section placeholderSection = new Section(-1, "Select");
        cbSection.addItem(placeholderSection);
        for (Object[] sec : sectionDAO.getAllSections()) {
            int sectionId = (int) sec[0];
            String sectionName = (String) sec[2];
            Section section = new Section(sectionId, sectionName);
            cbSection.addItem(section);
        }
    }
    
    private void addGradeLevelSectionSync() {
        cbGradeLevel.addActionListener(e -> {
            try {
                GradeLevel selectedGrade = (GradeLevel) cbGradeLevel.getSelectedItem();
                cbSection.removeAllItems();

                if (selectedGrade != null) {
                    
                    List<Object[]> sections = sectionDAO.getSectionsByGrade(selectedGrade.getGradeLevelName());
                    for (Object[] sec : sections) {
                        int sectionId = (int) sec[0];
                        String sectionName = (String) sec[2];
                        Section section = new Section(sectionId, sectionName);
                        cbSection.addItem(section);
                    }
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error loading sections: " + ex.getMessage());
            }
        });
        
        cbSection.addActionListener(e -> {
            try {
                Section selectedSection = (Section) cbSection.getSelectedItem();
                if (selectedSection != null) {
                    String gradeName = sectionDAO.getGradeBySection(selectedSection.getSectionName());
                    if (gradeName != null) {
                        for (int i = 0; i < cbGradeLevel.getItemCount(); i++) {
                            GradeLevel gl = cbGradeLevel.getItemAt(i);
                            if (gl.getGradeLevelName().equals(gradeName)) {
                                cbGradeLevel.setSelectedItem(gl);
                                break;
                            }
                        }
                    }
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error loading grade level: " + ex.getMessage());
            }
        });
    }

    private void loadAssignments() throws SQLException {
        tableModel.setRowCount(0);
        List<FacultyAssignment> assignments = assignmentDAO.getAllAssignments();
        for (FacultyAssignment fa : assignments) {
            tableModel.addRow(new Object[]{
                    fa.getFacultyName(),
                    fa.getSubjectName(),
                    fa.getGradeLevelName(),
                    fa.getSectionName(),
                    fa.isAdviser() ? "Yes" : "No"
            });
        }
    }

    private void loadFilterOptions() throws SQLException {
        cbSubjectFilter.removeAllItems();
        cbGradeFilter.removeAllItems();
        cbSectionFilter.removeAllItems();
        cbAdviserFilter.removeAllItems();

        cbSubjectFilter.addItem("All");
        cbAdviserFilter.addItem("All");
        cbAdviserFilter.addItem("Yes");
        cbAdviserFilter.addItem("No");

        for (Subject s : subjectDAO.getAllSubjects()) {
            cbSubjectFilter.addItem(s.getSubjectName());
        }
        for (GradeLevel gl : gradeLevelDAO.getAllGradeLevels()) {
            cbGradeFilter.addItem(gl.getGradeLevelName());
        }
        for (Object[] sec : sectionDAO.getAllSections()) {
            cbSectionFilter.addItem((String) sec[2]);
        }

        cbSubjectFilter.setPrototypeDisplayValue("Longest Subject Name");
        cbGradeFilter.setPrototypeDisplayValue("Grade 10");
        cbSectionFilter.setPrototypeDisplayValue("Section 10");
        cbAdviserFilter.setPrototypeDisplayValue("Yes");
    }

    private void addFilterSyncLogic() {
        cbGradeFilter.addActionListener(e -> {
            if (isUpdatingFilters) return;
            isUpdatingFilters = true;
            try {
                String selectedGrade = (String) cbGradeFilter.getSelectedItem();
                cbSectionFilter.removeAllItems();
                cbSectionFilter.addItem("All");

                if (selectedGrade != null && !selectedGrade.equals("All")) {
                    List<Object[]> sections = sectionDAO.getSectionsByGrade(selectedGrade);
                    for (Object[] sec : sections) {
                        cbSectionFilter.addItem((String) sec[2]);
                    }
                } else {
                    for (Object[] sec : sectionDAO.getAllSections()) {
                        cbSectionFilter.addItem((String) sec[2]);
                    }
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error loading sections: " + ex.getMessage());
            } finally {
                isUpdatingFilters = false;
            }
        });

        cbSectionFilter.addActionListener(e -> {
            if (isUpdatingFilters) return;
            isUpdatingFilters = true;
            try {
                String selectedSection = (String) cbSectionFilter.getSelectedItem();
                cbGradeFilter.removeAllItems();
                cbGradeFilter.addItem("All");

                if (selectedSection != null && !selectedSection.equals("All")) {
                    String gradeName = sectionDAO.getGradeBySection(selectedSection);
                    if (gradeName != null) {
                        cbGradeFilter.addItem(gradeName);
                        cbGradeFilter.setSelectedItem(gradeName);
                    }
                } else {
                    for (GradeLevel gl : gradeLevelDAO.getAllGradeLevels()) {
                        cbGradeFilter.addItem(gl.getGradeLevelName());
                    }
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error loading grade levels: " + ex.getMessage());
            } finally {
                isUpdatingFilters = false;
            }
        });
    }

    private void addLogic() {
        btnAssign.addActionListener(e -> {
            try {
                Faculty selectedFaculty = (Faculty) cbFaculty.getSelectedItem();
                Subject selectedSubject = (Subject) cbSubject.getSelectedItem();
                GradeLevel selectedGradeLevel = (GradeLevel) cbGradeLevel.getSelectedItem();
                Section selectedSection = (Section) cbSection.getSelectedItem();

                if (selectedFaculty == null || selectedFaculty.getFacultyId() == -1 || 
                    selectedSubject == null || selectedSubject.getSubjectId() == -1 ||
                    selectedGradeLevel == null || selectedGradeLevel.getGradeLevelId() == -1 ||
                    selectedSection == null || selectedSection.getSectionId() == -1) {
                
                    JOptionPane.showMessageDialog(this, "Please select Faculty, Subject, Grade Level, and Section.");
                    return;
                }

                int facultyId = selectedFaculty.getFacultyId();
                int subjectId = selectedSubject.getSubjectId();
                int sectionId = selectedSection.getSectionId();
                boolean isAdviser = chkAdviser.isSelected();

                boolean assigned = assignmentDAO.assignFacultyToSubject(facultyId, subjectId, sectionId, isAdviser);

                if (assigned) {
                    if (isAdviser) {
                        facultyDAO.setAsAdviser(facultyId, sectionId);
                    }
                    JOptionPane.showMessageDialog(this, "Faculty successfully assigned!");
                    loadAssignments();
                } else {
                    JOptionPane.showMessageDialog(this, "This faculty is already assigned to this subject and section.");
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            }
        });

        btnRemove.addActionListener(e -> {
            int row = tblAssignments.getSelectedRow();
            if (row == -1) {
                JOptionPane.showMessageDialog(this, "Select an assignment to remove.");
                return;
            }

            String facultyName = (String) tableModel.getValueAt(row, 0);
            String subjectName = (String) tableModel.getValueAt(row, 1);
            String gradeLevelName = (String) tableModel.getValueAt(row, 2);
            String sectionName = (String) tableModel.getValueAt(row, 3);

            int confirm = JOptionPane.showConfirmDialog(this,
                    "Remove " + facultyName + " from " + subjectName + " (" + gradeLevelName + " - " + 
                    sectionName + ")?", "Confirm Removal", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                try {
                    assignmentDAO.removeAssignment(facultyName, subjectName, sectionName);
                    loadAssignments();
                    JOptionPane.showMessageDialog(this, "Assignment removed successfully!");
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
                }
            }
        });
        
        tblAssignments.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int selectedRow = tblAssignments.getSelectedRow();
                if (selectedRow >= 0) {
                    
                String facultyName = (String) tblAssignments.getValueAt(selectedRow, 0);
                String subjectName = (String) tblAssignments.getValueAt(selectedRow, 1);
                String gradeLevelName = (String) tblAssignments.getValueAt(selectedRow, 2);
                String sectionName = (String) tblAssignments.getValueAt(selectedRow, 3);

                // Loop through combo box items to find matching objects
                for (int i = 0; i < cbFaculty.getItemCount(); i++) {
                    Faculty f = cbFaculty.getItemAt(i);
                    String fullName = f.getLastName() + ", " + f.getFirstName();
                    if (fullName.equalsIgnoreCase(facultyName)) {
                        cbFaculty.setSelectedIndex(i);
                        break;
                    }
                }

                for (int i = 0; i < cbSubject.getItemCount(); i++) {
                    Subject s = cbSubject.getItemAt(i);
                    if (s.getSubjectName().equalsIgnoreCase(subjectName)) {
                        cbSubject.setSelectedIndex(i);
                        break;
                    }
                }

                for (int i = 0; i < cbGradeLevel.getItemCount(); i++) {
                    GradeLevel g = cbGradeLevel.getItemAt(i);
                    if (g.getGradeLevelName().equalsIgnoreCase(gradeLevelName)) {
                        cbGradeLevel.setSelectedIndex(i);
                        break;
                    }
                }

                for (int i = 0; i < cbSection.getItemCount(); i++) {
                    Section s = cbSection.getItemAt(i);
                    if (s.getSectionName().equalsIgnoreCase(sectionName)) {
                        cbSection.setSelectedIndex(i);
                        break;
                    }
                }
            }
        }
    });

        btnRefresh.addActionListener(e -> {
            try {
                loadAssignments();
                loadDropdowns();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        });

        btnSearch.addActionListener(e -> {
            String keyword = txtSearch.getText().trim();
            String subjectFilter = (String) cbSubjectFilter.getSelectedItem();
            String gradeFilter = (String) cbGradeFilter.getSelectedItem();
            String sectionFilter = (String) cbSectionFilter.getSelectedItem();
            String adviserFilter = (String) cbAdviserFilter.getSelectedItem();

            try {
                List<FacultyAssignment> results = assignmentDAO.searchAssignments(
                        keyword, subjectFilter, gradeFilter, sectionFilter, adviserFilter
                );

                tableModel.setRowCount(0);
                for (FacultyAssignment fa : results) {
                    tableModel.addRow(new Object[]{
                            fa.getFacultyName(),
                            fa.getSubjectName(),
                            fa.getGradeLevelName(),
                            fa.getSectionName(),
                            fa.isAdviser() ? "Yes" : "No"
                    });
                }

                if (results.isEmpty() && !keyword.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "No results found.");
                }

            } catch (SQLException ex) {
                Logger.getLogger(ManageFacultyAssignmentPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        });

        btnReset.addActionListener(e -> {
            txtSearch.setText("");
            cbSubjectFilter.setSelectedIndex(0);
            cbGradeFilter.setSelectedIndex(0);
            cbSectionFilter.setSelectedIndex(0);
            cbAdviserFilter.setSelectedIndex(0);
            try {
                loadAssignments();
            } catch (SQLException ex) {
                Logger.getLogger(ManageFacultyAssignmentPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        });

        ActionListener filterListener = e -> btnSearch.doClick();
        cbSubjectFilter.addActionListener(filterListener);
        cbGradeFilter.addActionListener(filterListener);
        cbSectionFilter.addActionListener(filterListener);
        cbAdviserFilter.addActionListener(filterListener);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cbAdviserFilter;
    private javax.swing.JComboBox<Faculty> cbFaculty;
    private javax.swing.JComboBox<String> cbGradeFilter;
    private javax.swing.JComboBox<GradeLevel> cbGradeLevel;
    private javax.swing.JComboBox<Section> cbSection;
    private javax.swing.JComboBox<String> cbSectionFilter;
    private javax.swing.JComboBox<Subject> cbSubject;
    private javax.swing.JComboBox<String> cbSubjectFilter;
    private javax.swing.JCheckBox chkAdviser;
    private javax.swing.JLabel jLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFaculty;
    private javax.swing.JLabel lblSection;
    private javax.swing.JLabel lblSubject;
    private javax.swing.JLabel lblSubject1;
    private javax.swing.JTable tblAssignments;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
