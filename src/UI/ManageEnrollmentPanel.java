/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import DAO.AcademicYearDAO;
import DAO.EnrollmentDAO;
import DAO.GradeLevelDAO;
import DAO.SectionDAO;
import DAO.StudentDAO;
import Model.AcademicYear;
import Model.Enrollment;
import Model.GradeLevel;
import Model.Section;
import Model.Student;
import Util.DBConnection;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;

import java.sql.*;

import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USER
 */
public class ManageEnrollmentPanel extends javax.swing.JPanel {

    private AcademicYearDAO academicYearDAO = new AcademicYearDAO();
    private GradeLevelDAO gradeLevelDAO = new GradeLevelDAO();
    private SectionDAO sectionDAO = new SectionDAO();
    private StudentDAO studentDAO = new StudentDAO();
    private EnrollmentDAO enrollmentDAO = new EnrollmentDAO();

    private int activeYearId = -1;
    private List<AcademicYear> years;
    private DefaultTableModel tableModel;
    
    public ManageEnrollmentPanel() throws SQLException {
        initComponents();
        initTable();
        loadAcademicYears();
        loadGradeLevels();
        addLogic();
        loadActiveYear();
        loadActiveYearStatus();
        getAllStudents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblAcademicYear = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblGradeLevel = new javax.swing.JLabel();
        cbGradeLevel = new javax.swing.JComboBox<>();
        lblSection = new javax.swing.JLabel();
        cbSection = new javax.swing.JComboBox<>();
        btnFilter = new javax.swing.JButton();
        btnEnrollSelected = new javax.swing.JButton();
        btnUnenrollSelected = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        lblStudentId = new javax.swing.JLabel();
        txtStudentId = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblEnrollmentStatus = new javax.swing.JLabel();
        txtEnrollmentStatus = new javax.swing.JTextField();
        cboAcademicYear = new javax.swing.JComboBox<>();
        btnSetActiveYear = new javax.swing.JButton();
        txtStatus = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudents = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtGradeLevel = new javax.swing.JTextField();
        txtSection = new javax.swing.JTextField();
        btnEndAY = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(900, 590));

        lblAcademicYear.setText("Academic Year:");

        lblStatus.setText("Status:");

        lblGradeLevel.setText("Grade Level:");

        cbGradeLevel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblSection.setText("Section:");

        cbSection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnFilter.setText("Filter");

        btnEnrollSelected.setText("Enroll Selected");

        btnUnenrollSelected.setText("Unenroll Selected");

        btnRefresh.setText("Refresh Table");

        lblStudentId.setText("Student ID:");

        txtStudentId.setEditable(false);
        txtStudentId.setBackground(new java.awt.Color(204, 204, 204));
        txtStudentId.setForeground(new java.awt.Color(0, 0, 0));

        lblName.setText("Name:");

        txtName.setEditable(false);
        txtName.setBackground(new java.awt.Color(204, 204, 204));
        txtName.setForeground(new java.awt.Color(0, 0, 0));

        lblEnrollmentStatus.setText("Enrollment Status:");

        txtEnrollmentStatus.setEditable(false);
        txtEnrollmentStatus.setBackground(new java.awt.Color(204, 204, 204));
        txtEnrollmentStatus.setForeground(new java.awt.Color(0, 0, 0));

        cboAcademicYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnSetActiveYear.setText("Set A.Y.");

        txtStatus.setText("jLabel1");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("MANAGE ENROLLMENT");

        btnSearch.setText("Search");

        jScrollPane1.setPreferredSize(new java.awt.Dimension(476, 400));

        tblStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblStudents);

        jLabel2.setText("Grade Level:");

        jLabel3.setText("Section:");

        txtGradeLevel.setEditable(false);
        txtGradeLevel.setBackground(new java.awt.Color(204, 204, 204));
        txtGradeLevel.setForeground(new java.awt.Color(0, 0, 0));

        txtSection.setEditable(false);
        txtSection.setBackground(new java.awt.Color(204, 204, 204));
        txtSection.setForeground(new java.awt.Color(0, 0, 0));

        btnEndAY.setText("End A.Y.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnRefresh))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblName)
                                    .addComponent(lblEnrollmentStatus)
                                    .addComponent(lblStatus)
                                    .addComponent(lblGradeLevel)
                                    .addComponent(lblSection)
                                    .addComponent(lblStudentId)
                                    .addComponent(lblAcademicYear)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtStatus)
                                    .addComponent(txtStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEnrollmentStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnSetActiveYear)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnEndAY))
                                    .addComponent(cboAcademicYear, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtSection, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                                        .addComponent(txtGradeLevel, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(cbGradeLevel, javax.swing.GroupLayout.Alignment.LEADING, 0, 85, Short.MAX_VALUE)
                                        .addComponent(cbSection, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(btnEnrollSelected)
                                .addGap(18, 18, 18)
                                .addComponent(btnUnenrollSelected)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(40, 40, 40))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnFilter)
                .addGap(18, 18, 18)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearch)
                .addGap(40, 40, 40))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(btnFilter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAcademicYear)
                            .addComponent(cboAcademicYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSetActiveYear)
                            .addComponent(btnEndAY))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(txtStatus)
                            .addComponent(lblStatus))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblGradeLevel)
                            .addComponent(cbGradeLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblSection)
                            .addComponent(cbSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblStudentId)
                            .addComponent(txtStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblName)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblEnrollmentStatus)
                            .addComponent(txtEnrollmentStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtGradeLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEnrollSelected)
                            .addComponent(btnUnenrollSelected)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnRefresh)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleName("");
        getAccessibleContext().setAccessibleDescription("");
    }// </editor-fold>//GEN-END:initComponents

    private void initTable() {
        tableModel = new DefaultTableModel(
                new Object[]{"Student ID", "First Name", "Last Name", "Status"}, 0
        );
        tblStudents.setModel(tableModel);
        tblStudents.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    private void loadAcademicYears() throws SQLException {
        years = academicYearDAO.getAllAcademicYears();
        cboAcademicYear.removeAllItems();
        for (AcademicYear y : years) {
            String label = y.getYearLabel() + (y.getStatus().equalsIgnoreCase("OPEN") ? " (ACTIVE)" : "");
            cboAcademicYear.addItem(label);
        }
        cboAcademicYear.addActionListener(e -> updateStatusBasedOnSelection());
    }

    private void updateStatusBasedOnSelection() {
        int selectedIndex = cboAcademicYear.getSelectedIndex();
        if (selectedIndex != -1 && years != null && !years.isEmpty()) {
            AcademicYear selectedYear = years.get(selectedIndex);
            if (selectedYear.getStatus().equalsIgnoreCase("OPEN")) {
                txtStatus.setText("ACTIVE");
                txtStatus.setForeground(Color.GREEN);
            } else {
                txtStatus.setText("INACTIVE");
                txtStatus.setForeground(Color.RED);
            }
        }
    }

    private void loadGradeLevels() throws SQLException {
        cbGradeLevel.removeAllItems();
        for (GradeLevel level : gradeLevelDAO.getAllGradeLevels()) {
            cbGradeLevel.addItem(level.getGradeLevelName());
        }
    }

    private void loadActiveYearStatus() {
        try {
            AcademicYear activeYear = academicYearDAO.getActiveYear();
            if (activeYear != null) {
                txtStatus.setText("ACTIVE (" + activeYear.getYearLabel() + ")");
                txtStatus.setForeground(new Color(0, 153, 0));
            } else {
                txtStatus.setText("INACTIVE");
                txtStatus.setForeground(Color.RED);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            txtStatus.setText("Error");
            txtStatus.setForeground(Color.RED);
        }
    }

    private void getAllStudents() throws SQLException {
        tableModel.setRowCount(0);
        List<Student> students = studentDAO.getAllStudentsWithStatus(activeYearId);
        for (Student s : students) {
            tableModel.addRow(new Object[]{
                s.getStudentId(),
                s.getFirstName(),
                s.getLastName(),
                s.getCurrentStatus()
            });
        }
    }

    private void addLogic() {
        btnRefresh.addActionListener(e -> {
            try {
                getAllStudents();
            } catch (SQLException ex) {
                Logger.getLogger(ManageEnrollmentPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        });

        tblStudents.getSelectionModel().addListSelectionListener(e -> {
            int row = tblStudents.getSelectedRow();
            if (row != -1) {
                int studentId = (int) tableModel.getValueAt(row, 0);
                String name = tableModel.getValueAt(row, 1) + " " + tableModel.getValueAt(row, 2);

                txtStudentId.setText(String.valueOf(studentId));
                txtName.setText(name);

                try {
                    String status = enrollmentDAO.getStudentEnrollmentStatus(studentId, activeYearId);
                    String section = enrollmentDAO.getStudentSection(studentId, activeYearId);
                    String gradeLevel = enrollmentDAO.getStudentGradeLevel(studentId, activeYearId);

                    txtEnrollmentStatus.setText(status);
                    txtSection.setText(section);
                    txtGradeLevel.setText(gradeLevel);
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error loading enrollment info: " + ex.getMessage());
                }
            }
        });

        btnEnrollSelected.addActionListener(e -> {
            int row = tblStudents.getSelectedRow();
            if (row == -1) {
                JOptionPane.showMessageDialog(this, "Please select a student.");
                return;
            }
            System.out.println("Enroll logic here");
        });

        btnUnenrollSelected.addActionListener(e -> {
            int row = tblStudents.getSelectedRow();
            if (row == -1) {
                JOptionPane.showMessageDialog(this, "Please select a student.");
                return;
            }
            System.out.println("Unenroll logic here");
        });

        btnSetActiveYear.addActionListener(e -> {
            try {
                int selectedIndex = cboAcademicYear.getSelectedIndex();
                if (selectedIndex == -1) {
                    JOptionPane.showMessageDialog(this, "Please select an academic year first.");
                    return;
                }

                AcademicYear selectedYear = years.get(selectedIndex);

                int confirm = JOptionPane.showConfirmDialog(
                        this,
                        "Set " + selectedYear.getYearLabel() + " as ACTIVE?",
                        "Confirm",
                        JOptionPane.YES_NO_OPTION
                );

                if (confirm == JOptionPane.YES_OPTION) {
                    academicYearDAO.setActiveYear(selectedYear.getYearId());
                    JOptionPane.showMessageDialog(this,
                            "Academic year " + selectedYear.getYearLabel() + " is now ACTIVE.");
                    loadAcademicYears();
                    loadActiveYear();
                    updateStatusBasedOnSelection();
                    getAllStudents();
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this,
                        "Error updating active year: " + ex.getMessage(),
                        "Database Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        });
        
        btnEndAY.addActionListener(e -> {
            int confirm = JOptionPane.showConfirmDialog(
                    this,
                    "End the current academic year?\nAll students will be set to 'Not Enrolled' and year will be CLOSED.",
                    "Confirm",
                    JOptionPane.YES_NO_OPTION
            );

            if (confirm == JOptionPane.YES_OPTION) {
                try {
                    enrollmentDAO.markEnrollmentsInactiveForYear(activeYearId);
                    academicYearDAO.endActiveAcademicYear();
                    loadAcademicYears();
                    loadActiveYear();
                    getAllStudents();

                    txtStatus.setText("CLOSED");
                    txtStatus.setForeground(Color.RED);

                    JOptionPane.showMessageDialog(this, "Academic year successfully ended.");
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error ending year: " + ex.getMessage());
                }
            }
        });
    }

    private void loadActiveYear() throws SQLException {
        AcademicYear active = academicYearDAO.getActiveYear();
        if (active != null) {
            activeYearId = active.getYearId();
            cboAcademicYear.setSelectedItem(active.getYearLabel());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEndAY;
    private javax.swing.JButton btnEnrollSelected;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSetActiveYear;
    private javax.swing.JButton btnUnenrollSelected;
    private javax.swing.JComboBox<String> cbGradeLevel;
    private javax.swing.JComboBox<String> cbSection;
    private javax.swing.JComboBox<String> cboAcademicYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAcademicYear;
    private javax.swing.JLabel lblEnrollmentStatus;
    private javax.swing.JLabel lblGradeLevel;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblSection;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStudentId;
    private javax.swing.JTable tblStudents;
    private javax.swing.JTextField txtEnrollmentStatus;
    private javax.swing.JTextField txtGradeLevel;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSection;
    private javax.swing.JLabel txtStatus;
    private javax.swing.JTextField txtStudentId;
    // End of variables declaration//GEN-END:variables
}
