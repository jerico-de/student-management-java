/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import Model.Student;
import DAO.StudentDAO;
import DAO.UserDAO;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author USER
 */
public class ManageStudentsPanel extends javax.swing.JPanel {

    private StudentDAO studentDAO = new StudentDAO();
    private DefaultTableModel tableModel;
    
    /**
     * Creates new form ManageStudentsPanel
     */
    public ManageStudentsPanel() throws SQLException {
        initComponents();
        initTable();
        addLogic();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudents = new javax.swing.JTable();
        btnAddStudent = new javax.swing.JButton();
        btnEditStudent = new javax.swing.JButton();
        btnDeleteStudent = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();

        tblStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblStudents);

        btnAddStudent.setText("Add Student");

        btnEditStudent.setText("Edit Student");

        btnDeleteStudent.setText("Delete Student");

        btnRefresh.setText("Refresh");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddStudent)
                            .addComponent(btnEditStudent)
                            .addComponent(btnDeleteStudent)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRefresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(btnAddStudent)
                        .addGap(39, 39, 39)
                        .addComponent(btnEditStudent)
                        .addGap(36, 36, 36)
                        .addComponent(btnDeleteStudent)
                        .addGap(31, 31, 31)
                        .addComponent(btnRefresh)))
                .addContainerGap(74, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initTable() throws SQLException {
        tableModel = new DefaultTableModel(
                new Object[]{"Student ID", "First Name", "Last Name", "Enrollment Status"}, 0
        );
        tblStudents.setModel(tableModel);
        tblStudents.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        getAllStudents();
    }
    
    private void addLogic() {
        btnRefresh.addActionListener(e -> {
            try {
                getAllStudents();
            } catch (SQLException ex) {
                Logger.getLogger(ManageStudentsPanel.class.getName()).log(Level.SEVERE, null, ex);
            } System.out.println("Table refreshed.");
        });

        btnAddStudent.addActionListener(e -> {
            StudentFormDialog dialog = new StudentFormDialog(
                    (java.awt.Frame) SwingUtilities.getWindowAncestor(this), null);
            dialog.setVisible(true);
            if (dialog.isSaved()) {
                
                Student newStudent = dialog.getStudent();

                
                try {
                    UserDAO userDAO = new UserDAO();
                    userDAO.createUserForStudent(newStudent);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this,
                            "Error creating user account for the student: " + ex.getMessage(),
                            "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }

                
                try {
                    getAllStudents();
                } catch (SQLException ex) {
                    Logger.getLogger(ManageStudentsPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        btnEditStudent.addActionListener(e -> {
            int selectedRow = tblStudents.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a student to edit.");
                return;
            }
            int studentId = (int) tableModel.getValueAt(selectedRow, 0);
            Student student = studentDAO.getStudentById(studentId);
            if (student != null) {
                StudentFormDialog dialog = new StudentFormDialog(
                        (java.awt.Frame) SwingUtilities.getWindowAncestor(this), student);
                dialog.setVisible(true);
                if (dialog.isSaved()) {
                    try {
                        getAllStudents();
                    } catch (SQLException ex) {
                        Logger.getLogger(ManageStudentsPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });

        btnDeleteStudent.addActionListener(e -> {
            int selectedRow = tblStudents.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a student to delete.");
                return;
            }
            int studentId = (int) tableModel.getValueAt(selectedRow, 0);
            int confirm = JOptionPane.showConfirmDialog(
                    this, "Are you sure to delete this student?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                studentDAO.deleteStudent(studentId);
                try {
                    getAllStudents();
                } catch (SQLException ex) {
                    Logger.getLogger(ManageStudentsPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    private void getAllStudents() throws SQLException {
            try {
            tableModel.setRowCount(0); // clear table

            int currentYearId = getCurrentSchoolYearId(); // You can set or retrieve this dynamically
            List<Student> students = studentDAO.getAllStudentsWithStatus(currentYearId);

            for (Student student : students) {
                tableModel.addRow(new Object[]{
                    student.getStudentId(),
                    student.getFirstName(),
                    student.getLastName(),
                    student.getCurrentStatus()
                });
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading students: " + ex.getMessage());
        }
    }
    
    private int getCurrentSchoolYearId() {
        return 1; // Replace with actual logic to fetch current active year
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddStudent;
    private javax.swing.JButton btnDeleteStudent;
    private javax.swing.JButton btnEditStudent;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblStudents;
    // End of variables declaration//GEN-END:variables
}
