/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import DAO.AcademicYearDAO;
import Model.Student;
import DAO.StudentDAO;
import DAO.UserDAO;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author USER
 */
public class ManageStudentsPanel extends javax.swing.JPanel {

    private StudentDAO studentDAO = new StudentDAO();
    private DefaultTableModel tableModel;
    
    /**
     * Creates new form ManageStudentsPanel
     */
    public ManageStudentsPanel() throws SQLException {
        initComponents();
        initTable();
        addLogic();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudents = new javax.swing.JTable();
        btnAddStudent = new javax.swing.JButton();
        btnEditStudent = new javax.swing.JButton();
        btnDeleteStudent = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        lblFirstName = new javax.swing.JLabel();
        lblLastName = new javax.swing.JLabel();
        lblMiddleName = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        lblBirthdate = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        txtLastName = new javax.swing.JTextField();
        txtMiddleName = new javax.swing.JTextField();
        cmbGender = new javax.swing.JComboBox<>();
        jdcBirthdate = new com.toedter.calendar.JDateChooser();
        txtAddress = new javax.swing.JTextField();
        btnClearFields = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(900, 590));

        jScrollPane1.setPreferredSize(new java.awt.Dimension(476, 400));

        tblStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblStudents);

        btnAddStudent.setText("Add Student");

        btnEditStudent.setText("Edit Student");

        btnDeleteStudent.setText("Delete Student");

        btnRefresh.setText("Refresh Table");

        lblFirstName.setText("First Name:");

        lblLastName.setText("Last Name:");

        lblMiddleName.setText("Middle Name:");

        lblGender.setText("Gender:");

        lblBirthdate.setText("Birthdate:");

        lblAddress.setText("Address:");

        cmbGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Other" }));

        btnClearFields.setText("Clear Fields");

        btnSearch.setText("Search");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("MANAGE STUDENTS");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1)
                .addContainerGap(630, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnAddStudent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEditStudent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDeleteStudent))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFirstName, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblLastName, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblMiddleName, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblGender, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblBirthdate, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblAddress, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMiddleName, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jdcBirthdate, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnClearFields)
                        .addGap(18, 18, 18)
                        .addComponent(btnRefresh))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch)))
                .addGap(40, 40, 40))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtFirstName, txtLastName, txtMiddleName});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblFirstName)
                            .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblLastName)
                            .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblMiddleName)
                            .addComponent(txtMiddleName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblGender)
                            .addComponent(cmbGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblBirthdate)
                            .addComponent(jdcBirthdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAddress))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddStudent)
                            .addComponent(btnEditStudent)
                            .addComponent(btnDeleteStudent)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnClearFields)
                    .addComponent(btnRefresh))
                .addContainerGap(62, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initTable() throws SQLException {
        tableModel = new DefaultTableModel(
                new Object[]{"Student ID", "First Name", "Last Name", "Enrollment Status"}, 0
        );
        tblStudents.setModel(tableModel);
        tblStudents.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        getAllStudents();
        
        tblStudents.getSelectionModel().addListSelectionListener(event -> {
            if (!event.getValueIsAdjusting() && tblStudents.getSelectedRow() != -1) {
                int selectedRow = tblStudents.getSelectedRow();
                int studentId = (int) tableModel.getValueAt(selectedRow, 0);

                Student selectedStudent = studentDAO.getStudentById(studentId);
                if (selectedStudent != null) {
                    txtFirstName.setText(selectedStudent.getFirstName());
                    txtLastName.setText(selectedStudent.getLastName());
                    txtMiddleName.setText(selectedStudent.getMiddleName());
                    cmbGender.setSelectedItem(selectedStudent.getGender());

                    if (selectedStudent.getBirthdate() != null) {
                        jdcBirthdate.setDate(java.sql.Date.valueOf(selectedStudent.getBirthdate()));
                    } else {
                        jdcBirthdate.setDate(null);
                    }

                    txtAddress.setText(selectedStudent.getAddress());
                    }
                }
        });
    }
    
    private void addLogic() {
        btnRefresh.addActionListener(e -> {
            getAllStudents();
            System.out.println("Table refreshed.");
        });

        btnAddStudent.addActionListener(e -> {
            String firstName = txtFirstName.getText().trim();
            String lastName = txtLastName.getText().trim();
            String middleName = txtMiddleName.getText().trim();
            String gender = (String) cmbGender.getSelectedItem();
            LocalDate birthdate = null;
            if (jdcBirthdate.getDate() != null) {
                birthdate = jdcBirthdate.getDate().toInstant()
                        .atZone(ZoneId.systemDefault())
                        .toLocalDate();
            }
            String address = txtAddress.getText().trim();

            if (firstName.isEmpty() || lastName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "First name and last name are required.");
                return;
            }

            Student student = new Student();
            student.setFirstName(firstName);
            student.setLastName(lastName);
            student.setMiddleName(middleName);
            student.setGender(gender);
            student.setBirthdate(birthdate);
            student.setAddress(address);

            try {
                UserDAO userDAO = new UserDAO();
                int userId = userDAO.createUserForStudent(student);
                student.setUserId(userId);

                StudentDAO studentDAO = new StudentDAO();
                if (studentDAO.addStudent(student)) {
                    JOptionPane.showMessageDialog(this, "Student added successfully.");
                    getAllStudents();
                    System.out.println("User " + "'" + firstName + "" + lastName + "'" + " addedd successfully.");

                    // Clear input fields after adding
                    clearFields();
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to add student.");
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(),
                        "Database Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        });

        btnEditStudent.addActionListener(e -> {
            int selectedRow = tblStudents.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a student to edit.");
                return;
            }

            int studentId = (int) tableModel.getValueAt(selectedRow, 0);

            String firstName = txtFirstName.getText().trim();
            String lastName = txtLastName.getText().trim();
            String middleName = txtMiddleName.getText().trim();
            String gender = (String) cmbGender.getSelectedItem();
            LocalDate birthdate = null;
            if (jdcBirthdate.getDate() != null) {
                birthdate = jdcBirthdate.getDate().toInstant()
                        .atZone(ZoneId.systemDefault())
                        .toLocalDate();
            }
            String address = txtAddress.getText().trim();

            if (firstName.isEmpty() || lastName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "First name and last name are required.");
                return;
            }

            Student student = new Student();
            student.setStudentId(studentId);
            student.setFirstName(firstName);
            student.setLastName(lastName);
            student.setMiddleName(middleName);
            student.setGender(gender);
            student.setBirthdate(birthdate);
            student.setAddress(address);
            
            int confirm = JOptionPane.showConfirmDialog(
                    this, "Are you sure you want to delete this student?", 
                    "Confirm Deletion", JOptionPane.YES_NO_OPTION
            );
            
            
            if (confirm == JOptionPane.YES_OPTION) {
                boolean updated = studentDAO.updateStudent(student);
                if (updated) {
                    JOptionPane.showMessageDialog(this, "Student updated successfully.");
                    getAllStudents();
                    System.out.println("User " + "'" + firstName + "" + lastName + "'" + " updated successfully.");
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to update student.");
                }
            } clearFields();
        });

        btnDeleteStudent.addActionListener(e -> {
            int selectedRow = tblStudents.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a student to delete.");
                return;
            }

            int studentId = (int) tableModel.getValueAt(selectedRow, 0);
            int confirm = JOptionPane.showConfirmDialog(
                    this, "Are you sure you want to delete this student?", 
                    "Confirm Deletion", JOptionPane.YES_NO_OPTION
            );

            if (confirm == JOptionPane.YES_OPTION) {
                boolean deleted = studentDAO.deleteStudent(studentId);
                if (deleted) {
                    JOptionPane.showMessageDialog(this, "Student deleted successfully.");
                    getAllStudents();
                    System.out.println("User with student ID " + "'" + studentId + "'" + " deleted successfully.");
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to delete student.");
                }
            } clearFields();
        });
        
        btnClearFields.addActionListener (e -> clearFields());
        
        btnSearch.addActionListener(e -> {
            String keyword = txtSearch.getText().trim();
            AcademicYearDAO academicYearDAO = new AcademicYearDAO();
            
            if (keyword.isEmpty()) {
                JOptionPane.showMessageDialog(
                        this,
                        "Please enter a username or user ID to search.",
                        "Input Required",
                        JOptionPane.WARNING_MESSAGE
                );
                return;
            }
            
            try {
                int currentYearId = academicYearDAO.getCurrentYearId();
                List<Student> students = studentDAO.searchStudents(keyword, currentYearId);
                
                if (students.isEmpty()) {
                    JOptionPane.showMessageDialog(
                            this,
                            "No student information found.",
                            "Search Result",
                            JOptionPane.INFORMATION_MESSAGE
                    );
                } else {
                    loadStudentsToTable(students);
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error searching students: " + ex.getMessage());
            }
        });
        
        tblStudents.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int selectedRow = tblStudents.getSelectedRow();
                if (selectedRow >= 0) {
                    int studentId = (int) tblStudents.getValueAt(selectedRow, 0);
                    Student student = studentDAO.getStudentById(studentId);
                    if (student != null) {
                        txtFirstName.setText(student.getFirstName());
                        txtLastName.setText(student.getLastName());
                        txtMiddleName.setText(student.getMiddleName());
                        cmbGender.setSelectedItem(student.getGender());
                        txtAddress.setText(student.getAddress());
                        if (student.getBirthdate() != null) {
                            jdcBirthdate.setDate(java.sql.Date.valueOf(student.getBirthdate()));
                        }
                    }
                }
            }
        });
    }
    
        private void loadStudentsToTable(List<Student> students) {
            tableModel.setRowCount(0); // Clear existing rows

            for (Student student : students) {
                tableModel.addRow(new Object[]{
                    student.getStudentId(),
                    student.getFirstName(),
                    student.getLastName(),
                    student.getCurrentStatus()
                });
            }
        }
    
        private void clearFields() {
        txtFirstName.setText("");
        txtLastName.setText("");
        txtMiddleName.setText("");
        cmbGender.setSelectedIndex(0);
        jdcBirthdate.setDate(null);
        txtAddress.setText("");
        txtSearch.setText("");
        getAllStudents();
        System.out.println("Fields cleared.");
    }
    
    private void getAllStudents() {
            try {
            tableModel.setRowCount(0); // clear table

            int currentYearId = getCurrentSchoolYearId(); // You can set or retrieve this dynamically
            List<Student> students = studentDAO.getAllStudentsWithStatus(currentYearId);

            for (Student student : students) {
                tableModel.addRow(new Object[]{
                    student.getStudentId(),
                    student.getFirstName(),
                    student.getLastName(),
                    student.getCurrentStatus()
                });
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading students: " + ex.getMessage());
        }
    }
    
    private int getCurrentSchoolYearId() {
        return 1;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddStudent;
    private javax.swing.JButton btnClearFields;
    private javax.swing.JButton btnDeleteStudent;
    private javax.swing.JButton btnEditStudent;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cmbGender;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser jdcBirthdate;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblBirthdate;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblMiddleName;
    private javax.swing.JTable tblStudents;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtMiddleName;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
