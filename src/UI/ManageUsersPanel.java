/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import DAO.UserDAO;
import Model.User;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USER
 */
public class ManageUsersPanel extends javax.swing.JPanel {

    private UserDAO userDAO = new UserDAO();
    private DefaultTableModel tableModel;
    
    /**
     * Creates new form ManageUsersPanel
     */
    public ManageUsersPanel() throws SQLException {
        initComponents();
        initTable();
        loadUsers();
        addLogic();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAddUser = new javax.swing.JButton();
        btnUpdateUser = new javax.swing.JButton();
        btnDeleteUser = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        lblUsername = new javax.swing.JLabel();
        lblRole = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        cbRole = new javax.swing.JComboBox<>();
        cbStatus = new javax.swing.JComboBox<>();
        btnClear = new javax.swing.JButton();
        lblUserId = new javax.swing.JLabel();
        txtUserId = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUsers = new javax.swing.JTable();

        btnAddUser.setText("Add User");

        btnUpdateUser.setText("Update User");

        btnDeleteUser.setText("Delete User");

        btnRefresh.setText("Refresh Table");

        lblUsername.setText("Username:");

        lblRole.setText("Role:");

        lblStatus.setText("Status:");

        cbRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NONE", "ADMIN", "FACULTY", "STUDENT" }));

        cbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NONE", "ACTIVE", "INACTIVE" }));

        btnClear.setText("Clear Fields");

        lblUserId.setText("User ID:");

        btnSearch.setText("Search");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("MANAGE USERS");

        jScrollPane1.setPreferredSize(new java.awt.Dimension(476, 400));

        tblUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblUsers);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblUsername)
                                    .addComponent(lblUserId)
                                    .addComponent(lblStatus)
                                    .addComponent(lblRole))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtUserId, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdateUser)
                                .addGap(18, 18, 18)
                                .addComponent(btnDeleteUser)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnRefresh))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSearch))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtUserId, txtUsername});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUserId)
                            .addComponent(txtUserId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUsername)
                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblRole)
                            .addComponent(cbRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblStatus)
                            .addComponent(cbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddUser)
                            .addComponent(btnUpdateUser)
                            .addComponent(btnDeleteUser)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefresh)
                    .addComponent(btnClear))
                .addContainerGap(62, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addLogic() {
        btnRefresh.addActionListener(e -> {
                System.out.println("Table Refreshed.");
                loadUsers();
        });
                
        // Select row → populate fields
        tblUsers.getSelectionModel().addListSelectionListener(e -> {
            int row = tblUsers.getSelectedRow();
            if (row != -1) {
                txtUserId.setText(String.valueOf(tableModel.getValueAt(row, 0)));
                txtUsername.setText((String) tableModel.getValueAt(row, 1));
                cbRole.setSelectedItem((String) tableModel.getValueAt(row, 2));
                cbStatus.setSelectedItem((String) tableModel.getValueAt(row, 3));
            }
        });

        // Add User
        btnAddUser.addActionListener(e -> {
            String username = txtUsername.getText().trim();
            String role = (String) cbRole.getSelectedItem();
            String status = (String) cbStatus.getSelectedItem();

            if (username.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Username is required.");
                return;
            }

            String defaultPassword = "password";
            
            User u = new User();
            u.setUsername(username);
            u.setPassword(defaultPassword);
            u.setRole(role);
            u.setStatus(status);

            userDAO.addUser(u);
            getAllUsers();
            clearFields();
            
            System.out.println("User " + "'" + username + "'" + "successfully added.");
            
            JOptionPane.showMessageDialog(this, "User added successfully with default password: \"password\"");
        });

        // Update User
        btnUpdateUser.addActionListener(e -> {
            int row = tblUsers.getSelectedRow();
            if (row == -1) {
                JOptionPane.showMessageDialog(this, "Please select a user to update.");
                return;
            }

            int userId = (int) tableModel.getValueAt(row, 0);
            String username = txtUsername.getText().trim();
            String role = (String) cbRole.getSelectedItem();
            String status = (String) cbStatus.getSelectedItem();

            User u = new User();
            u.setUserId(userId);
            u.setUsername(username);
            u.setRole(role);
            u.setStatus(status);

            userDAO.updateUser(u);
            getAllUsers();
            clearFields();
            
            System.out.println("User " + "'" + userId + "'" + " successfully updated.");
            JOptionPane.showMessageDialog(this, "User updated successfully!");
        });

        // Delete User
        btnDeleteUser.addActionListener(e -> {
            int row = tblUsers.getSelectedRow();
            if (row == -1) {
                JOptionPane.showMessageDialog(this, "Please select a user to delete.");
                return;
            }
            int userId = (int) tableModel.getValueAt(row, 0);
            int confirm = JOptionPane.showConfirmDialog(this, "Delete this user?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                userDAO.deleteUser(userId);
                getAllUsers();
                clearFields();
                
                System.out.println("User " + "'" + userId + "'" + " successfully deleted.");
                JOptionPane.showMessageDialog(this, "User deleted successfully!");
            }
        });

        // Clear
        btnClear.addActionListener(e -> clearFields());
        
        btnSearch.addActionListener(e -> {
            String keyword = txtSearch.getText().trim();

            if (keyword.isEmpty()) {
                JOptionPane.showMessageDialog(
                        this,
                        "Please enter a username or user ID to search.",
                        "Input Required",
                        JOptionPane.WARNING_MESSAGE
                );
                getAllUsers();
                return;
            }

            try {
                List<User> users = userDAO.searchUsers(keyword);

                if (users.isEmpty()) {
                    JOptionPane.showMessageDialog(
                            this,
                            "No user found.",
                            "Search Result",
                            JOptionPane.INFORMATION_MESSAGE
                    );
                    tableModel.setRowCount(0); // Clear table if no match
                } else {
                    tableModel.setRowCount(0);
                    for (User u : users) {
                        tableModel.addRow(new Object[]{
                                u.getUserId(),
                                u.getUsername(),
                                u.getRole(),
                                u.getStatus()
                        });
                    }
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error searching users: " + ex.getMessage());
                ex.printStackTrace();
            }
        });
        
        tblUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int selectedRow = tblUsers.getSelectedRow();
                if (selectedRow >= 0) {
                    int userId = (int) tblUsers.getValueAt(selectedRow, 0);
                    try {
                        User user = userDAO.getUserById(userId);
                        if (user != null) {
                            txtUsername.setText(user.getUsername());
                            cbRole.setSelectedItem(user.getRole());
                            cbStatus.setSelectedItem(user.getStatus());
                        }
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog(
                                ManageUsersPanel.this,
                                "Error loading user details: " + ex.getMessage(),
                                "Error",
                                JOptionPane.ERROR_MESSAGE
                        );
                    }
                }
            }
        });
    }
    
    private void initTable() {
        tableModel = new DefaultTableModel(
                new Object[]{"User ID", "Username", "Role", "Status"}, 0
        );
        tblUsers.setModel(tableModel);
        tblUsers.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        getAllUsers();
    }
    
    private void getAllUsers() {
        tableModel.setRowCount(0);
        List<User> users = userDAO.getAllUsers();
        for (User u : users) {
            tableModel.addRow(new Object[]{
                    u.getUserId(),
                    u.getUsername(),
                    u.getRole(),
                    u.getStatus()
            });
        }
    }
    
    private void clearFields() {
        txtUserId.setText("");
        txtUsername.setText("");
        cbRole.setSelectedIndex(0);
        cbStatus.setSelectedIndex(0);
        tblUsers.clearSelection();
        txtSearch.setText("");
        loadUsers();
    }
    
    private void loadUsers() {
        tableModel.setRowCount(0); // clear table
        List<User> users = userDAO.getAllUsers();
        for (User user : users) {
            tableModel.addRow(new Object[]{
                user.getUserId(),
                user.getUsername(),
                user.getRole(),
                user.getStatus()
            });
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddUser;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDeleteUser;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdateUser;
    private javax.swing.JComboBox<String> cbRole;
    private javax.swing.JComboBox<String> cbStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblUserId;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JTable tblUsers;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtUserId;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
